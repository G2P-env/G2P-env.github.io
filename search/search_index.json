{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"G2P G enotype to P henotype Overview of G2P G2P ( G enotype to P henotype) is an integrative environment in form of Singularity container, which not only contains a library of 16 state-of-the-art GS models and 13 evaluation metrics for model evaluation and selection but also provides several stand-alone software and easy-to-use functions for data preprocessing, population analysis, integration of prediction results from multiple models, and refinement of training datasets. G2P provides a comprehensive environment for genomic selection to facilitate the comparison and selection of appropriate model. G2P not only was developed and packaged in a Singularity container, allowing easy installation and upgrade, but also was accessible as an stand-alone R package. Installation of G2P container for installation and quick start of G2P. Input files and data preprocessing for functions of input files and data preprocessing. Genomic selection and model evaluation for functions of genotype-to-phenotype prediction. Integration of prediction results for functions of multiple models predciton results integration. Refinement design of training dataset for function of training dataset refinement and design. Github : G2P G2P container download link : G2P.sif R package download link : G2P_1.0.tar.gz QuickStart : G2P QuickStart Contact us : qchengray@cau.edu.cn Note : cademic users can download directly, industrial users first contact us.","title":"Home"},{"location":"#g2p","text":"G enotype to P henotype Overview of G2P G2P ( G enotype to P henotype) is an integrative environment in form of Singularity container, which not only contains a library of 16 state-of-the-art GS models and 13 evaluation metrics for model evaluation and selection but also provides several stand-alone software and easy-to-use functions for data preprocessing, population analysis, integration of prediction results from multiple models, and refinement of training datasets. G2P provides a comprehensive environment for genomic selection to facilitate the comparison and selection of appropriate model. G2P not only was developed and packaged in a Singularity container, allowing easy installation and upgrade, but also was accessible as an stand-alone R package. Installation of G2P container for installation and quick start of G2P. Input files and data preprocessing for functions of input files and data preprocessing. Genomic selection and model evaluation for functions of genotype-to-phenotype prediction. Integration of prediction results for functions of multiple models predciton results integration. Refinement design of training dataset for function of training dataset refinement and design. Github : G2P G2P container download link : G2P.sif R package download link : G2P_1.0.tar.gz QuickStart : G2P QuickStart Contact us : qchengray@cau.edu.cn Note : cademic users can download directly, industrial users first contact us.","title":"G2P"},{"location":"QuickStart/","text":"Quickstart Installation and quickstart This section mainly recommends the installation of G2P and briefly introduces some typical usage of G2P container and G2P package to help users get started quickly. Details and other functions of GOVS,please see Tutorial Installation Installation of G2P container 1. Installation of Singularity (Linux, assuming ubuntu) 1.1 Install system dependencies $ sudo apt-get update && sudo apt-get install -y \\ build-essential \\ libssl-dev \\ uuid-dev \\ libgpgme11-dev \\ squashfs-tools \\ libseccomp-dev \\ wget \\ pkg-config \\ git \\ cryptsetup 1.2 Installing GO $ export VERSION=1.16.4 OS=linux ARCH=amd64 && \\ # Replace the values as needed wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \\ # Downloads the required Go package sudo tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \\ # Extracts the archive rm go$VERSION.$OS-$ARCH.tar.gz # Deletes the ``tar`` file Note : you can vist Go Downloads page for suitable to the environment you are in 1.3 Installing Singularity You can download SingularityCE from one of the releases. To see a full list, visit the [GitHub release page](https://github.com/sylabs/singularity/releases). After deciding on a release to install, you can run the following commands to proceed with the installation (here we use version 3.8.1 as example). ```bash $ export VERSION=3.8.1 && # adjust this as necessary \\ wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-ce-${VERSION}.tar.gz && \\ tar -xzf singularity-ce-${VERSION}.tar.gz && \\ cd singularity-ce-${VERSION} 1.4 Compile singularity $ ./mconfig && \\ make -C builddir && \\ sudo make -C builddir install Note : If you get an error when compile, please try the following command or refer to Singularity websit for documents . ## Motify the file mlocal/frags/go_common_opts.mk in singularity path\uff0cfind the following line and change it GOPROXY := https://goproxy.cn,direct ## At the same time\uff0c motify the global proxy go env -w GOPROXY=https://goproxy.cn,direct 1.5 Installing Singularity for other operating system Singularity can be installed via Vagrant Boxes for Windows and Intel cores MacOS, the details please refer to Singularity installation guide . 2. Pulling G2P container singularity pull G2P.sif library://mym89757/repo/g2p:latest Installation of G2P R package Note : the functions, like GSFiltering , GSImputation , GSTransForm , GSRead shown in figure \"Overview of G2P\" a needs the opearation evironment and stand-alone software on the circle, namely\uff0c these function in G2P pcakage can't be performed normally unless the dependencis shown in figure \"Overview of G2P\" a (upper semicircle) have been correctly installed and configuration. G2P package can be installed for MacOS, Linux and windows and the functions shown in figure \"Overview of G2P\" b can run normally. 1. Github install ## install dependencies and GOVS install.packages(c(\"ggplot2\",\"brnn\",\"glmnet\",\"spls\",\"pls\",\"e1071\",\"BGLR\",\"rrBLUP\",\"randomForest\",\"hglm\",\"hglm.data\",\"parallel\",\"pROC\",\"PRROC\",\"STPGA\",\"reshape\",\"reshape2\",\"grid\",\"pbapply\",\"pheatmap\",\"data.table\")) require(\"devtools\") install_github(\"G2P-env/G2P\") 2.Download .tar.gz package and install ## install dependencies and GOVS with bult-in vignette install.packages(c(\"ggplot2\",\"brnn\",\"glmnet\",\"spls\",\"pls\",\"e1071\",\"BGLR\",\"rrBLUP\",\"randomForest\",\"hglm\",\"hglm.data\",\"parallel\",\"pROC\",\"PRROC\",\"STPGA\",\"reshape\",\"reshape2\",\"grid\",\"pbapply\",\"pheatmap\",\"data.table\")) install.packages(\"DownloadPath/GOVS_1.0.tar.gz\") Usage of G2P container 1. Using G2P for interactive window $singularity exec G2P.sif R G2P Container run R Then R can be used as usual. ## library G2P package library(G2P) ## load example data ## data(\"cubic\") ## perform genotype to phenotype prediction with all integrated methods ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400) 2. Using G2P to run Rscrit data(\"cubic\") ## perform genotype to phenotype prediction ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\",\"RRBLUP\", \"SPLS\"),trainIdx = 1:200,predIdx = 201:400) write.table(G2Pres,file = \"predRes.txt\",quote = F,col.names = T) Saving above scripts or your own scripts to an R scripts file *.r (e.g. predGS_test.r), Then use G2P container to run it. $singularity exec G2P.sif Rscript predGS_test.r G2P Container run R 3 Using G2P Container run stand-alone software Plink $singularity exec G2P.sif plink G2P Container run Plink Gemma $singularity exec G2P.sif gemma G2P Container run Gemma GCTA $singularity exec G2P.sif GCTA G2P Container run GCTA TASSEL $singularity exec G2P.sif Tassel G2P Container run TASSEL VCFtools $singularity exec G2P.sif vcftools G2P Container run VCFtools Usage of G2P pacakge With RStudio Interface of Rstudio From the console library(G2P) ls(\"package:G2P\")","title":"QuickStart"},{"location":"QuickStart/#quickstart","text":"Installation and quickstart This section mainly recommends the installation of G2P and briefly introduces some typical usage of G2P container and G2P package to help users get started quickly. Details and other functions of GOVS,please see Tutorial","title":"Quickstart"},{"location":"QuickStart/#installation","text":"","title":"Installation"},{"location":"QuickStart/#installation-of-g2p-container","text":"","title":"Installation of G2P container"},{"location":"QuickStart/#1-installation-of-singularity-linux-assuming-ubuntu","text":"1.1 Install system dependencies $ sudo apt-get update && sudo apt-get install -y \\ build-essential \\ libssl-dev \\ uuid-dev \\ libgpgme11-dev \\ squashfs-tools \\ libseccomp-dev \\ wget \\ pkg-config \\ git \\ cryptsetup 1.2 Installing GO $ export VERSION=1.16.4 OS=linux ARCH=amd64 && \\ # Replace the values as needed wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \\ # Downloads the required Go package sudo tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \\ # Extracts the archive rm go$VERSION.$OS-$ARCH.tar.gz # Deletes the ``tar`` file Note : you can vist Go Downloads page for suitable to the environment you are in 1.3 Installing Singularity You can download SingularityCE from one of the releases. To see a full list, visit the [GitHub release page](https://github.com/sylabs/singularity/releases). After deciding on a release to install, you can run the following commands to proceed with the installation (here we use version 3.8.1 as example). ```bash $ export VERSION=3.8.1 && # adjust this as necessary \\ wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-ce-${VERSION}.tar.gz && \\ tar -xzf singularity-ce-${VERSION}.tar.gz && \\ cd singularity-ce-${VERSION} 1.4 Compile singularity $ ./mconfig && \\ make -C builddir && \\ sudo make -C builddir install Note : If you get an error when compile, please try the following command or refer to Singularity websit for documents . ## Motify the file mlocal/frags/go_common_opts.mk in singularity path\uff0cfind the following line and change it GOPROXY := https://goproxy.cn,direct ## At the same time\uff0c motify the global proxy go env -w GOPROXY=https://goproxy.cn,direct 1.5 Installing Singularity for other operating system Singularity can be installed via Vagrant Boxes for Windows and Intel cores MacOS, the details please refer to Singularity installation guide .","title":"1. Installation of Singularity (Linux, assuming ubuntu) "},{"location":"QuickStart/#2-pulling-g2p-container","text":"singularity pull G2P.sif library://mym89757/repo/g2p:latest","title":"2. Pulling G2P container"},{"location":"QuickStart/#installation-of-g2p-r-package","text":"Note : the functions, like GSFiltering , GSImputation , GSTransForm , GSRead shown in figure \"Overview of G2P\" a needs the opearation evironment and stand-alone software on the circle, namely\uff0c these function in G2P pcakage can't be performed normally unless the dependencis shown in figure \"Overview of G2P\" a (upper semicircle) have been correctly installed and configuration. G2P package can be installed for MacOS, Linux and windows and the functions shown in figure \"Overview of G2P\" b can run normally. 1. Github install ## install dependencies and GOVS install.packages(c(\"ggplot2\",\"brnn\",\"glmnet\",\"spls\",\"pls\",\"e1071\",\"BGLR\",\"rrBLUP\",\"randomForest\",\"hglm\",\"hglm.data\",\"parallel\",\"pROC\",\"PRROC\",\"STPGA\",\"reshape\",\"reshape2\",\"grid\",\"pbapply\",\"pheatmap\",\"data.table\")) require(\"devtools\") install_github(\"G2P-env/G2P\") 2.Download .tar.gz package and install ## install dependencies and GOVS with bult-in vignette install.packages(c(\"ggplot2\",\"brnn\",\"glmnet\",\"spls\",\"pls\",\"e1071\",\"BGLR\",\"rrBLUP\",\"randomForest\",\"hglm\",\"hglm.data\",\"parallel\",\"pROC\",\"PRROC\",\"STPGA\",\"reshape\",\"reshape2\",\"grid\",\"pbapply\",\"pheatmap\",\"data.table\")) install.packages(\"DownloadPath/GOVS_1.0.tar.gz\")","title":"Installation of G2P R package"},{"location":"QuickStart/#usage-of-g2p-container","text":"","title":"Usage of G2P container"},{"location":"QuickStart/#1-using-g2p-for-interactive-window","text":"$singularity exec G2P.sif R G2P Container run R Then R can be used as usual. ## library G2P package library(G2P) ## load example data ## data(\"cubic\") ## perform genotype to phenotype prediction with all integrated methods ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400)","title":"1. Using G2P for interactive window"},{"location":"QuickStart/#2-using-g2p-to-run-rscrit","text":"data(\"cubic\") ## perform genotype to phenotype prediction ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\",\"RRBLUP\", \"SPLS\"),trainIdx = 1:200,predIdx = 201:400) write.table(G2Pres,file = \"predRes.txt\",quote = F,col.names = T) Saving above scripts or your own scripts to an R scripts file *.r (e.g. predGS_test.r), Then use G2P container to run it. $singularity exec G2P.sif Rscript predGS_test.r G2P Container run R","title":"2. Using G2P to run Rscrit"},{"location":"QuickStart/#3-using-g2p-container-run-stand-alone-software","text":"Plink $singularity exec G2P.sif plink G2P Container run Plink Gemma $singularity exec G2P.sif gemma G2P Container run Gemma GCTA $singularity exec G2P.sif GCTA G2P Container run GCTA TASSEL $singularity exec G2P.sif Tassel G2P Container run TASSEL VCFtools $singularity exec G2P.sif vcftools G2P Container run VCFtools","title":"3 Using G2P Container run stand-alone software"},{"location":"QuickStart/#usage-of-g2p-pacakge","text":"With RStudio Interface of Rstudio From the console library(G2P) ls(\"package:G2P\")","title":"Usage of G2P pacakge"},{"location":"Tutorial/","text":"Tutorial Introduction of main functions and parameter information In this section, the main functions in G2P and thier parameters will be introducted in details. Input files and data preprocessing Format conversion of genotypic data GSTransForm Description The function can only be used in G2P-sif. By calling other external software like VCFtools Plink TASSEL etc for the transition of genotype format Usage GSTransForm(pattern, input, output, workdir = \"./\", memory = 8 ) Arguments pattern (character) pattern of transformation, including \"hmp2plink\",\"plink2vcf\",\"vcf2hmp\",\"vcf2plink\",\"plink2hmp\", and \"hmp2vcf\". input (character) name of original file, prefix for plink, full name for hapmap and vcf. output (character) name of original file, prefix for all. workdir (character) set working directory memory (integer) set memory size Example data(\"cubic_hmp\") setwd(\"./\") write.table(hmp,file = \"test.hmp.txt\",row.names = F,col.names = T,sep = \"\\t\",quote = F) ## transformation ## GSTransForm(pattern=\"hmp2plink\",input=\"test.hmp.txt\",output=\"h2p\",workdir=\"./\") Filtering of genotypic data GSFiltering Description The function can only be used in G2P-sif that can raduce genotypic data by calling Plink. Usage GSFiltering(input, output , inputformat = \"hmp\", missingRate = 0, maf = 0.05,window = 100,step = 5,r2 = 0.1) Arguments input (character) name of original file, prefix for plink, full name for hapmap and vcf. output (character) name of original file, prefix for all. inputformat (character) file format of input file, \"hmp\" for hapmap,\"vcf\" VCF or \"plink\" for bed,bim,fam. missingRate (numeric [0-1]) filters out all variants with missing call rates exceeding the provided value to be removed maf (numeric [0-1]) filters out all variants with minor allele frequency below the provided threshold (default 0.05) window (numeric or character) window size in variant count (numeric) or kilobase (if the 'kb' modifier is present). step (numeric) variant count to shift the window at the end of each step r2 (numeric) pairwise r2 threshold: at each step. workdir (character) set working directory memory (integer) set memory size Example ## load example data ## data(\"cubic_hmp\") setwd(\"./\") write.table(hmp,file = \"test.hmp.txt\",row.names = F,col.names = T,sep = \"\\t\",quote = F) ## filtering GSFiltering(input = \"test.hmp.txt\", output = \"filter_res\", inputformat = \"hmp\", missingRate = 0, maf = 0.05,window = 100,step = 5,r2 = 0.1) Imputation of the larger genotypic data GSImputation Description The function can only be used in G2P-sif that can execute imputation of genotypic data by calling Beagle. Usage GSImputation(input, output, inputformat, workdir = \"./\", memory = 8,threads = 1,window = 40,overlap = 2) Arguments input (character) name of original file, prefix for plink, full name for hapmap and vcf. output (character) name of original file, prefix for all. inputformat (character) file format of input file, \"hmp\" for hapmap,\"vcf\" VCF or \"plink\" for bed,bim,fam. memory (numeric) set memory size, GB. threads (numeric) specifies the number of computational threads that will be used. window (numeric) specifies the cM length of each sliding window (default: 40). overlap (numeric) specifies the cM length of overlap between adjacent sliding windows(default: 2). workdir (character) set working directory. Example ## load example data ## data(\"cubic_hmp\") setwd(\"./\") ## generating NA to data hmp_NA <- as.matrix(hmp[,-c(1:11)]) hmp_NA[sample(1:length(hmp_NA),1000000)] <- \"NN\" hmp_NA <- cbind(hmp[,1:11],hmp_NA) write.table(hmp_NA,file = \"test_NA.hmp.txt\",row.names = F,col.names = T,sep = \"\\t\",quote = F) ## imputation GSImputation(input = \"test_NA.hmp.txt\", output = \"impute_res_NA\", workdir = \"./\", inputformat = \"hmp\") Fast read of the larger genotypic data GSRead Description The function can only be used in G2P-sif that can fast read the larger genotypic data in PLINK HapMap and VCF format, convert it to numeric format (0 1 2) by calling Plink. Usage GSRead(input, output, inputformat, workdir = \"./\", memory = 8) Arguments input (character) name of original file, prefix for plink, full name for hapmap and vcf. output (character) name of original file, prefix for all. inputformat (character) file format of input file, \"hmp\" for hapmap,\"vcf\" VCF or \"plink\" for bed,bim,fam. memory (numeric) set memory size, GB. workdir (character) set working directory. Example ## load example data ## library(G2P) data(\"cubic_hmp\") setwd(\"./\") write.table(hmp,file = \"test.hmp.txt\",row.names = F,col.names = T,sep = \"\\t\",quote = F) ## filtering G <- GSRead(input = \"test.hmp.txt\", output = \"read_tmp\", inputformat = \"hmp\", workdir = \"./\", memory = 8) ## show genotypic in numeric dim(G) G[1:10,1:10] The example results of GSRead Data quality control of genomic selection GSDataQC Description The function can raduce genotypic data by calling Plink. Usage GSFiltering(input, output , inputformat = \"hmp\", missingRate = 0, maf = 0.05,window = 100,step = 5,r2 = 0.1) Arguments markers (numeric, matrix) genotypic data, row represents sample and column represents SNP (feature). Missing (NA) alleles are allowed phenotype (data.frame) the phenotype data. The first column must be the sample name. pheno Phenotypic data frame, the first column describes sample IDs. impute (logical) if TRUE, imputation, default FALSE. filter (logical) if TRUE, filtering genotypic data with MAF and missing rate. NABound (numeric, [0,1]) max missing value percentage. MAFBound (numeric, [0,1]) min MAF percentage in each marker. imputeMethod (character) the method of imputation, \"mean\" or \"median\", default \"median\". hete (numeric) if genotypic matrix coded with numeric or transformed to numeric from letter, this parameter is used for MAF summary which define the numeric code of heterozygote, default 1 among 0,1,2. silent (logical) TRUE for hiding progress bar and FALSE for showing progress bar. Example data(MZ) ## generate missing value misIndex <- sample(1:length(Markers),1000000) Markers[misIndex] <- NA ## GSDataQC, not impute ## QCRes <- GSDataQC(markers = Markers, phenotype = pheData, impute = T) ## GSDataQC, impute with methods mean ## QCResImpute <- GSDataQC(markers = Markers, phenotype = pheData, impute = T, imputeMethod = \"mean\") Genomic selection and model evaluation Genotype-to-phenotype prediction G2P Description The function fits genomic selection models, performs prediction and exports the prediction value of testing sets. Usage G2P(markers,data,fix = NULL,trait,trainIdx,predIdx,modelMethods =\"BayesA\", outputModel = FALSE,NAImpute = FALSE, nIter = 1500, burnIn = 500, thin = 5, saveAt = \"\", S0 = NULL, df0 =5, R2 = 0.5, weights = NULL,verbose = FALSE, rmExistingFiles = TRUE, groups=NULLimportance = FALSE,posPercentage = 0.4, BestIndividuals = c(\"top\"),ntree = 500,nodesize = NULL,kernel = c(\"linear\"), gamma = 1, cost = 2^(-9), K = 8,eta = 0.7,select = \"pls2\",fit = \"simpls\", scale.x = FALSE,scale.y = FALSE,eps = 1e-4,maxstep = 100, parameters,alpha = 1,X = NULL,family = gaussian(link = identity), lambda = NULL, tol.err = 1e-6, tol.conv = 1e-8,epochs = 30, neurons = 4, ...) Arguments markers (numeric, matrix) genootypic data, row represents sample and column represents SNP (feature).Genotypes generally be coded as {0,1,2;0 represents AA(homozygote),2 represents BB(homozygote) and 1 represents AB(heterozygote); missing (NA) alleles are not allowed. data (data.frame) phenotypic data and other information for data set. fix (character, array) names of data that used as fix effects, numeric, NAs are not permitted, testPheno (numeric) the phenotype value of test population individual, default NULL. trait (character) the trait name in data to fit model and perform genotype-to-phenotype prediction. trainIdx (numeric, array) index of training set in marker and data. predIdx (numeric, array) index of testing/prediction set in marker and data. modelMethods (character) 16 alternative models to fit, including \"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\" outputModel (logical) if TRUE, return the list of trained model and prediction results, default FALSE. NAImpute (logical) if true, the missing values in phenotype will be imputed by mean otherwise be removed. nIter,burnIn,thin (integer) the number of iterations, burn-in and thinning,default nIter 7000,burnIn 500,thin 5. saveAt (string) this may include a path and a pre-fix that will be added to the name of the files that are saved as the program runs,default \"\". S0,df0 (numeric) the scale parameter for the scaled inverse-chi squared prior assigned to the residual variance, only used with Gaussian outcomes.Default S0 NULL,df0 = 5. R2 (numeric, (0,1)) the proportion of variance that one expects, a priori, to be explained by the regression. Only used if the hyper-parameters are not specified.Defult 0.5 weights (numeric) a vector of weights, may be NULL. If weights is not NULL, the residual variance of each data-point is set to be proportional to the square of the weight. Only used with Gaussian outcomes. verbose (logical) if TRUE the iteration history is printed, default FALSE. rmExistingFiles (logical) if TRUE, removes existing output files from previous runs, default TRUE. groups (factor) a vector of the same length of y that associates observations with groups, each group will have an associated variance component for the error term. ntree (integer) ramdomforest parameter. Number of trees to grow. This should not be set to too small a number, to ensure that every input row gets predicted at least a few times,default 500. nodesize (integer) ramdomforest parameter Minimum size of terminal nodes. Setting this number larger causes smaller trees to be grown (and thus take less time). Note that the default values are different for classification (1) and regression (5). posPercentage (numeric,[0,1]) phenotype of extreme individuals which expected, default 0.4. BestIndividuals (character) the position of expected phenotype in whole phenotypic data set.\"top\",\"buttom\" or \"middle\",default \"top\". kernel (numeric) svm parameter the kernel used in training and predicting. You might consider changing some of the following parameters, depending on the kernel type.(linear,polynomial,sigmoid,radial). Default \"linear\". gamma (numeric)svm parameter parameter needed for all kernels except linear, default 1. cost (numeric)svm parameter cost of constraints violation, default: 2^(-9), it is the 'C'-constant of the regularization term in the Lagrange formulation. K (integer) SPLS parameter: number of hidden components. eta (numeric) SPLS parameter: thresholding parameter. eta should be between 0 and 1. select (character) SPLS parameter: PLS algorithm for variable selection. Alternatives are \"pls2\" or \"simpls\". Default is \"pls2\". fit (character) SPLS parameter: PLS algorithm for model fitting. Alternatives are \"kernelpls\", \"widekernelpls\", \"simpls\", or \"oscorespls\". Default is \"simpls\". scale.x (character) SPLS parameter: scale predictors by dividing each predictor variable by its sample standard deviation? scale.y (character) SPLS parameter: scale responses by dividing each response variable by its sample standard deviation? eps (character) SPLS parameter: an effective zero. Default is 1e-4. maxstep (integer) SPLS parameter: maximum number of iterations when fitting direction vectors. Default is 100. alpha (numeric) LASSO model parameter: the elasticnet mixing parameter.Detail in glmnet. family the distribution family of y, see help('family') for more details. lambda the shrinkage parameter determines the amount of shrinkage. Default is NULL meaning that it is to be estimated along with other model parameters. tol.err internal tolerance level for extremely small values; default value is 1e-6. tol.conv tolerance level in convergence; default value is 1e-8. neurons (integer) indicates the number of neurons,defult 4. epochs (integer) maximum number of epochs(iterations) to train, default 30. Example ## load example data ## data(\"cubic\") ## perform genotype to phenotype prediction with all integrated methods ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400) ## perform genotype to phenotype prediction with all integrated methods and output model ## C2Pres_outmodel <- G2P(markers = Markers,data = pheData,trait = \"DTT\",outputModel = T, modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400) ## add other information as fix effects ## ## fix effects not permit NA, so impute NA first. data <- pheData data <- apply(data[,-1], 2,function(x){x[which(is.na(x) == T)] <- mean(x,na.rm = T);x}) data <- as.data.frame(data) data$EW <- pheData$EW ## perform genotype to phenotype prediction ## C2Pres_fix <- G2P(markers = Markers,data = data,trait = \"EW\",outputModel = T,fix = c(\"DTT\",\"PH\"), modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400) G2P cross-validation G2PCrossValidation Description The function achieve cross-validation for integrated GS models. Usage G2PCrossValidation(cvSampleList = NULL,cross = 10,times = 1, seed = 1,cpus = 1,markers,data,trait,modelMethods,...) Arguments cvSampleList (list) the specified cross-validation combination, or a list from function \\code{\\link{cvSampleIndex.Default NULL and execute a random grouping. cross (integer) the fold of N-fold cross-validation. For example cross = 10 for 10-fold cross-validation. times (integer) the times of repetition. For example, cross = 10 and times = 5 for five times 10-fold cross-validation. seed (integer) random seed for sampling of cross-validation. cpus (integer) number of cpu cores to parallelizing cross-validation(only available in UNIX-like operating systems), default 1. markers (numeric, matrix) row represents sample and column represents SNP (feature).Genotypes generally be coded as {0,1,2;0 represents AA(homozygote),2 represents BB(homozygote) and 1 represents AB(heterozygote); missing (NA) alleles are not allowed. data (data.frame) phenotypic data and other information for data set. trait (character) name of aim trait to perform cross-validation. modelMethods (character) 16 alternative models to fit, including \"BayesA, \"BayesB, \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\" Other parameters are same to G2P Example ## load example data ## data(\"cubic\") ## perform a 2 times 5-fold cross-validation ## predlist <- G2PCrossValidation(cross = 5,seed = 1, cpus = 1, times = 2, markers = Markers[1:200,], data = pheData[1:200,], trait = \"DTT\", modelMethods = c(\"rrBLUP\", \"spls\"), outputModel = FALSE) Evaluation G2PEvaluation Description The function consolidates 13 evaluation metrics to evaluete the performance of genomic selection models. Usage G2PEvaluation(realScores, predScores, Probability = FALSE, evalMethod = \"RE\", Beta = 1, BestIndividuals = \"top\", topAlpha = 1:90,probIndex = NULL) Arguments realScores (numeric,vector) observation values of validation data. predScores (numeric,vector or matrix) prediction values from genomic selection models. evalMethod (character) alternative evaluation metrics, including \"pearson\", \"kendall\", \"spearman\", \"MSE\", \"R2\", \"RE\", \"Kappa\", \"AUC\", \"AUCpr\", \"accuracy\", \"F1\", \"meanNDCG\", \"NDCG\". Beta (numeric) the parameter of F-measure or F-score, when beta = 1, meaning F1, Default F1. BestIndividuals (character) the position of expected phenotype in whole phenotypic data set.\"top\",\"buttom\" or \"middle\",default \"top\". topAlpha (numeric, array) the proportion of considering excellent samples, default 1:90. globalAlpha (logical) if global metrics (pearson, kendall, spearman, MSE and R2) evaluate by threshold (topAlpha),default FALSE. probIndex (integer) indicate the column index which prediction result is probability. For example, classification model \"RFC\" locates the fifth column in prediction matrix and then probIndex = 5. Example data(\"cubic\") ########## prediction ############ C2Pres <- G2P(markers = Markers,data = pheData,trait = \"EW\", modelMethods = c(\"BayesA\", \"BRR\", \"RRBLUP\", \"SPLS\", \"SVC\", \"RFR\"),trainIdx = 1:200,predIdx = 201:400) ########## evaluation ############ evalres <- G2PEvaluation(realScores = C2Pres[,1], predScores = C2Pres[,2:7], evalMethod = c(\"pearson\", \"kendall\",\"spearman\",\"RE\",\"Kappa\", \"AUC\",\"AUCpr\",\"NDCG\",\"meanNDCG\", \"MSE\",\"R2\",\"F1\",\"accuracy\"),topAlpha = 1:90, probIndex = 5) Integration of prediction results Two results integration and user-defined integration (more than two models results) GSMerge Description The function provides a strategy to integrate the results of two or more methods. Usage GSMerge(predResMat, ratio, autoOptimize = F) Arguments predResMat (numeric, matrix) the prediction results of algorithms which you want to merge, the first column is the real value of trait. ratio (numeric,array) the weights of every algorithms. autoOptimize (logical) if true, two group results of methods from multiple-results will be selected and then get average (wight 1:1), default FALSE. Example data(\"cubic\") ## Genotype-to-phenotype ## G2Pres <- G2P(markers = Markers,data = pheData,trait = \"EW\", modelMethods = c(\"BayesA\", \"BRR\", \"RRBLUP\", \"SPLS\", \"RFR\"),trainIdx = 1:200,predIdx = 201:400) ## merge 2 model prediction results ## GSMergeRes <- GSMerge(predResMat = G2Pres[,c(\"realPhenScore\",\"RRBLUP\",\"SPLS\")], autoOptimize = F,ratio = c(3,7)) ## merge 2 model prediction results automatically ## GSMergeRes <- GSMerge(predResMat = G2Pres, autoOptimize = T) The function provides a strategy to integrate the results of multiple GS methods. Multiple results integration GSEnsemble Description Results integration of multiple GS methods Usage GSEnsemble(predMat, nrandom = 10, evalMethods, by = 0.1, evaluation = T, topAlpha = 15) Arguments predMat (numeric, matrix) the prediction results of algorithms which you want to merge, the first column is the real value of trait. nrandom (integer) the repeat number of stacking, default 10. evalMethods (character) ensemble base which evaluation methods. by (numeric,(0,1)) the radio window of ensemble, the smaller \"by\", the higher accuracy of ensemble. Default 0.1. evaluation (logical) if evaluate finalMat with evalMethods, default TRUE. topAlpha (numeric) the parameter of threshold evaluation methods, see also function evaluateGS. In this function, indicates the best ensemble base threshold when evalMethods is threshold methods. Example ## load example data ## data(\"cubic\") ## Genotype-to-phenotype ## G2Pres <- G2P(markers = Markers,data = pheData,trait = \"EW\", modelMethods = c(\"BayesA\", \"BRR\", \"RRBLUP\", \"SPLS\", \"RFR\"),trainIdx = 1:200,predIdx = 201:400) ## ensemble more than 2 prediction results of models automatically ## GSEnsembleRes <- GSEnsemble(predMat = G2Pres, nrandom = 10, evalMethods = \"pearson\", by = 0.1, evaluation = T) ## new prediction of genotype-to-phenotype ## G2PresNew <- G2P(markers = Markers,data = pheData,trait = \"EW\", modelMethods = c(\"BayesA\", \"BRR\", \"RRBLUP\", \"SPLS\", \"RFR\"),trainIdx = 1:200,predIdx = 401:600) ## apply GSEnsemble rotio to new prediction ## GSEnsembleModelRes <- GSMerge(predResMat = G2PresNew,ratio = GSEnsembleRes$BestWeight, autoOptimize = F) Refinement design of training dataset TSRefine Description Refining the training set for selective phenotyping to reduce cost. Usage TSRefine(markers,candidates,test = NULL,ntosel,method = \"PEVmean\", npop = 100, nelite =5 ,mutprob = .8,niterations = 500, cores = 1,lambda = NULL,sequent = FALSE,visulization = F) Arguments markers (numeric, matrix) row represents sample and column represents SNP (feature).Genotypes generally be coded as {0,1,2;0 represents AA(homozygote),2 represents BB(homozygote) and 1 represents AB(heterozygote); missing (NA) alleles are not allowed. candidates (charcter array) names of condidates population. test (character, array) names of testing or predicted set, defult NULL, if NULL, execute reference-free refinement, else execute reference-based refinement. ntosel (integer) number of samples to select in refinement. method (character) alternativeal algorithms for training set refinement or selection, including \"PEVmean\", \"CDmean\", \"sim\", or \"RD\". Default is \"PEVmean\". npop (integer) genetic algorithm parameter, number of solutions at each iteration. nelite (integer) genetic algorithm parameter, number of solutions selected as elite parents which will generate the next set of solutions. mutprob (numeric) genetic algorithm parameter, probability of mutation for each generated soluation. niterations (integer) genetic algorithm parameter, number of iterations. cores (integer) number of CPU cores to use. lambda (numeric) scalar shrinkage parameter (\u03bb>0). sequent (logical) phenotype selection parameter, if TRUE, perform sequential optimization, default FALSE. Example ## load example data ## data(\"cubic\") ## reference-free refinement ## G <- Markers[1:300,] TSR_SP <- TSRefine(markers = G, candidates = rownames(G), test = NULL, ntosel = 100,cores = 1,visulization = T) ## reference-based refinement (PEV-mean) ## TSR_PEVmean <- TSRefine(markers = G, method = \"PEVmean\", candidates = rownames(G)[1:200], test = rownames(Markers)[201:300], ntosel = 50,cores = 1,visulization = T)","title":"Tutorial"},{"location":"Tutorial/#tutorial","text":"Introduction of main functions and parameter information In this section, the main functions in G2P and thier parameters will be introducted in details.","title":"Tutorial"},{"location":"Tutorial/#input-files-and-data-preprocessing","text":"","title":"Input files and data preprocessing"},{"location":"Tutorial/#format-conversion-of-genotypic-data","text":"GSTransForm Description The function can only be used in G2P-sif. By calling other external software like VCFtools Plink TASSEL etc for the transition of genotype format Usage GSTransForm(pattern, input, output, workdir = \"./\", memory = 8 ) Arguments pattern (character) pattern of transformation, including \"hmp2plink\",\"plink2vcf\",\"vcf2hmp\",\"vcf2plink\",\"plink2hmp\", and \"hmp2vcf\". input (character) name of original file, prefix for plink, full name for hapmap and vcf. output (character) name of original file, prefix for all. workdir (character) set working directory memory (integer) set memory size Example data(\"cubic_hmp\") setwd(\"./\") write.table(hmp,file = \"test.hmp.txt\",row.names = F,col.names = T,sep = \"\\t\",quote = F) ## transformation ## GSTransForm(pattern=\"hmp2plink\",input=\"test.hmp.txt\",output=\"h2p\",workdir=\"./\")","title":"Format conversion of genotypic data"},{"location":"Tutorial/#filtering-of-genotypic-data","text":"GSFiltering Description The function can only be used in G2P-sif that can raduce genotypic data by calling Plink. Usage GSFiltering(input, output , inputformat = \"hmp\", missingRate = 0, maf = 0.05,window = 100,step = 5,r2 = 0.1) Arguments input (character) name of original file, prefix for plink, full name for hapmap and vcf. output (character) name of original file, prefix for all. inputformat (character) file format of input file, \"hmp\" for hapmap,\"vcf\" VCF or \"plink\" for bed,bim,fam. missingRate (numeric [0-1]) filters out all variants with missing call rates exceeding the provided value to be removed maf (numeric [0-1]) filters out all variants with minor allele frequency below the provided threshold (default 0.05) window (numeric or character) window size in variant count (numeric) or kilobase (if the 'kb' modifier is present). step (numeric) variant count to shift the window at the end of each step r2 (numeric) pairwise r2 threshold: at each step. workdir (character) set working directory memory (integer) set memory size Example ## load example data ## data(\"cubic_hmp\") setwd(\"./\") write.table(hmp,file = \"test.hmp.txt\",row.names = F,col.names = T,sep = \"\\t\",quote = F) ## filtering GSFiltering(input = \"test.hmp.txt\", output = \"filter_res\", inputformat = \"hmp\", missingRate = 0, maf = 0.05,window = 100,step = 5,r2 = 0.1)","title":"Filtering of genotypic data"},{"location":"Tutorial/#imputation-of-the-larger-genotypic-data","text":"GSImputation Description The function can only be used in G2P-sif that can execute imputation of genotypic data by calling Beagle. Usage GSImputation(input, output, inputformat, workdir = \"./\", memory = 8,threads = 1,window = 40,overlap = 2) Arguments input (character) name of original file, prefix for plink, full name for hapmap and vcf. output (character) name of original file, prefix for all. inputformat (character) file format of input file, \"hmp\" for hapmap,\"vcf\" VCF or \"plink\" for bed,bim,fam. memory (numeric) set memory size, GB. threads (numeric) specifies the number of computational threads that will be used. window (numeric) specifies the cM length of each sliding window (default: 40). overlap (numeric) specifies the cM length of overlap between adjacent sliding windows(default: 2). workdir (character) set working directory. Example ## load example data ## data(\"cubic_hmp\") setwd(\"./\") ## generating NA to data hmp_NA <- as.matrix(hmp[,-c(1:11)]) hmp_NA[sample(1:length(hmp_NA),1000000)] <- \"NN\" hmp_NA <- cbind(hmp[,1:11],hmp_NA) write.table(hmp_NA,file = \"test_NA.hmp.txt\",row.names = F,col.names = T,sep = \"\\t\",quote = F) ## imputation GSImputation(input = \"test_NA.hmp.txt\", output = \"impute_res_NA\", workdir = \"./\", inputformat = \"hmp\")","title":"Imputation of the larger genotypic data"},{"location":"Tutorial/#fast-read-of-the-larger-genotypic-data","text":"GSRead Description The function can only be used in G2P-sif that can fast read the larger genotypic data in PLINK HapMap and VCF format, convert it to numeric format (0 1 2) by calling Plink. Usage GSRead(input, output, inputformat, workdir = \"./\", memory = 8) Arguments input (character) name of original file, prefix for plink, full name for hapmap and vcf. output (character) name of original file, prefix for all. inputformat (character) file format of input file, \"hmp\" for hapmap,\"vcf\" VCF or \"plink\" for bed,bim,fam. memory (numeric) set memory size, GB. workdir (character) set working directory. Example ## load example data ## library(G2P) data(\"cubic_hmp\") setwd(\"./\") write.table(hmp,file = \"test.hmp.txt\",row.names = F,col.names = T,sep = \"\\t\",quote = F) ## filtering G <- GSRead(input = \"test.hmp.txt\", output = \"read_tmp\", inputformat = \"hmp\", workdir = \"./\", memory = 8) ## show genotypic in numeric dim(G) G[1:10,1:10] The example results of GSRead","title":"Fast read of the larger genotypic data"},{"location":"Tutorial/#data-quality-control-of-genomic-selection","text":"GSDataQC Description The function can raduce genotypic data by calling Plink. Usage GSFiltering(input, output , inputformat = \"hmp\", missingRate = 0, maf = 0.05,window = 100,step = 5,r2 = 0.1) Arguments markers (numeric, matrix) genotypic data, row represents sample and column represents SNP (feature). Missing (NA) alleles are allowed phenotype (data.frame) the phenotype data. The first column must be the sample name. pheno Phenotypic data frame, the first column describes sample IDs. impute (logical) if TRUE, imputation, default FALSE. filter (logical) if TRUE, filtering genotypic data with MAF and missing rate. NABound (numeric, [0,1]) max missing value percentage. MAFBound (numeric, [0,1]) min MAF percentage in each marker. imputeMethod (character) the method of imputation, \"mean\" or \"median\", default \"median\". hete (numeric) if genotypic matrix coded with numeric or transformed to numeric from letter, this parameter is used for MAF summary which define the numeric code of heterozygote, default 1 among 0,1,2. silent (logical) TRUE for hiding progress bar and FALSE for showing progress bar. Example data(MZ) ## generate missing value misIndex <- sample(1:length(Markers),1000000) Markers[misIndex] <- NA ## GSDataQC, not impute ## QCRes <- GSDataQC(markers = Markers, phenotype = pheData, impute = T) ## GSDataQC, impute with methods mean ## QCResImpute <- GSDataQC(markers = Markers, phenotype = pheData, impute = T, imputeMethod = \"mean\")","title":"Data quality control of genomic selection"},{"location":"Tutorial/#genomic-selection-and-model-evaluation","text":"","title":"Genomic selection and model evaluation"},{"location":"Tutorial/#genotype-to-phenotype-prediction","text":"G2P Description The function fits genomic selection models, performs prediction and exports the prediction value of testing sets. Usage G2P(markers,data,fix = NULL,trait,trainIdx,predIdx,modelMethods =\"BayesA\", outputModel = FALSE,NAImpute = FALSE, nIter = 1500, burnIn = 500, thin = 5, saveAt = \"\", S0 = NULL, df0 =5, R2 = 0.5, weights = NULL,verbose = FALSE, rmExistingFiles = TRUE, groups=NULLimportance = FALSE,posPercentage = 0.4, BestIndividuals = c(\"top\"),ntree = 500,nodesize = NULL,kernel = c(\"linear\"), gamma = 1, cost = 2^(-9), K = 8,eta = 0.7,select = \"pls2\",fit = \"simpls\", scale.x = FALSE,scale.y = FALSE,eps = 1e-4,maxstep = 100, parameters,alpha = 1,X = NULL,family = gaussian(link = identity), lambda = NULL, tol.err = 1e-6, tol.conv = 1e-8,epochs = 30, neurons = 4, ...) Arguments markers (numeric, matrix) genootypic data, row represents sample and column represents SNP (feature).Genotypes generally be coded as {0,1,2;0 represents AA(homozygote),2 represents BB(homozygote) and 1 represents AB(heterozygote); missing (NA) alleles are not allowed. data (data.frame) phenotypic data and other information for data set. fix (character, array) names of data that used as fix effects, numeric, NAs are not permitted, testPheno (numeric) the phenotype value of test population individual, default NULL. trait (character) the trait name in data to fit model and perform genotype-to-phenotype prediction. trainIdx (numeric, array) index of training set in marker and data. predIdx (numeric, array) index of testing/prediction set in marker and data. modelMethods (character) 16 alternative models to fit, including \"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\" outputModel (logical) if TRUE, return the list of trained model and prediction results, default FALSE. NAImpute (logical) if true, the missing values in phenotype will be imputed by mean otherwise be removed. nIter,burnIn,thin (integer) the number of iterations, burn-in and thinning,default nIter 7000,burnIn 500,thin 5. saveAt (string) this may include a path and a pre-fix that will be added to the name of the files that are saved as the program runs,default \"\". S0,df0 (numeric) the scale parameter for the scaled inverse-chi squared prior assigned to the residual variance, only used with Gaussian outcomes.Default S0 NULL,df0 = 5. R2 (numeric, (0,1)) the proportion of variance that one expects, a priori, to be explained by the regression. Only used if the hyper-parameters are not specified.Defult 0.5 weights (numeric) a vector of weights, may be NULL. If weights is not NULL, the residual variance of each data-point is set to be proportional to the square of the weight. Only used with Gaussian outcomes. verbose (logical) if TRUE the iteration history is printed, default FALSE. rmExistingFiles (logical) if TRUE, removes existing output files from previous runs, default TRUE. groups (factor) a vector of the same length of y that associates observations with groups, each group will have an associated variance component for the error term. ntree (integer) ramdomforest parameter. Number of trees to grow. This should not be set to too small a number, to ensure that every input row gets predicted at least a few times,default 500. nodesize (integer) ramdomforest parameter Minimum size of terminal nodes. Setting this number larger causes smaller trees to be grown (and thus take less time). Note that the default values are different for classification (1) and regression (5). posPercentage (numeric,[0,1]) phenotype of extreme individuals which expected, default 0.4. BestIndividuals (character) the position of expected phenotype in whole phenotypic data set.\"top\",\"buttom\" or \"middle\",default \"top\". kernel (numeric) svm parameter the kernel used in training and predicting. You might consider changing some of the following parameters, depending on the kernel type.(linear,polynomial,sigmoid,radial). Default \"linear\". gamma (numeric)svm parameter parameter needed for all kernels except linear, default 1. cost (numeric)svm parameter cost of constraints violation, default: 2^(-9), it is the 'C'-constant of the regularization term in the Lagrange formulation. K (integer) SPLS parameter: number of hidden components. eta (numeric) SPLS parameter: thresholding parameter. eta should be between 0 and 1. select (character) SPLS parameter: PLS algorithm for variable selection. Alternatives are \"pls2\" or \"simpls\". Default is \"pls2\". fit (character) SPLS parameter: PLS algorithm for model fitting. Alternatives are \"kernelpls\", \"widekernelpls\", \"simpls\", or \"oscorespls\". Default is \"simpls\". scale.x (character) SPLS parameter: scale predictors by dividing each predictor variable by its sample standard deviation? scale.y (character) SPLS parameter: scale responses by dividing each response variable by its sample standard deviation? eps (character) SPLS parameter: an effective zero. Default is 1e-4. maxstep (integer) SPLS parameter: maximum number of iterations when fitting direction vectors. Default is 100. alpha (numeric) LASSO model parameter: the elasticnet mixing parameter.Detail in glmnet. family the distribution family of y, see help('family') for more details. lambda the shrinkage parameter determines the amount of shrinkage. Default is NULL meaning that it is to be estimated along with other model parameters. tol.err internal tolerance level for extremely small values; default value is 1e-6. tol.conv tolerance level in convergence; default value is 1e-8. neurons (integer) indicates the number of neurons,defult 4. epochs (integer) maximum number of epochs(iterations) to train, default 30. Example ## load example data ## data(\"cubic\") ## perform genotype to phenotype prediction with all integrated methods ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400) ## perform genotype to phenotype prediction with all integrated methods and output model ## C2Pres_outmodel <- G2P(markers = Markers,data = pheData,trait = \"DTT\",outputModel = T, modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400) ## add other information as fix effects ## ## fix effects not permit NA, so impute NA first. data <- pheData data <- apply(data[,-1], 2,function(x){x[which(is.na(x) == T)] <- mean(x,na.rm = T);x}) data <- as.data.frame(data) data$EW <- pheData$EW ## perform genotype to phenotype prediction ## C2Pres_fix <- G2P(markers = Markers,data = data,trait = \"EW\",outputModel = T,fix = c(\"DTT\",\"PH\"), modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400)","title":"Genotype-to-phenotype prediction"},{"location":"Tutorial/#g2p-cross-validation","text":"G2PCrossValidation Description The function achieve cross-validation for integrated GS models. Usage G2PCrossValidation(cvSampleList = NULL,cross = 10,times = 1, seed = 1,cpus = 1,markers,data,trait,modelMethods,...) Arguments cvSampleList (list) the specified cross-validation combination, or a list from function \\code{\\link{cvSampleIndex.Default NULL and execute a random grouping. cross (integer) the fold of N-fold cross-validation. For example cross = 10 for 10-fold cross-validation. times (integer) the times of repetition. For example, cross = 10 and times = 5 for five times 10-fold cross-validation. seed (integer) random seed for sampling of cross-validation. cpus (integer) number of cpu cores to parallelizing cross-validation(only available in UNIX-like operating systems), default 1. markers (numeric, matrix) row represents sample and column represents SNP (feature).Genotypes generally be coded as {0,1,2;0 represents AA(homozygote),2 represents BB(homozygote) and 1 represents AB(heterozygote); missing (NA) alleles are not allowed. data (data.frame) phenotypic data and other information for data set. trait (character) name of aim trait to perform cross-validation. modelMethods (character) 16 alternative models to fit, including \"BayesA, \"BayesB, \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\" Other parameters are same to G2P Example ## load example data ## data(\"cubic\") ## perform a 2 times 5-fold cross-validation ## predlist <- G2PCrossValidation(cross = 5,seed = 1, cpus = 1, times = 2, markers = Markers[1:200,], data = pheData[1:200,], trait = \"DTT\", modelMethods = c(\"rrBLUP\", \"spls\"), outputModel = FALSE)","title":"G2P cross-validation"},{"location":"Tutorial/#evaluation","text":"G2PEvaluation Description The function consolidates 13 evaluation metrics to evaluete the performance of genomic selection models. Usage G2PEvaluation(realScores, predScores, Probability = FALSE, evalMethod = \"RE\", Beta = 1, BestIndividuals = \"top\", topAlpha = 1:90,probIndex = NULL) Arguments realScores (numeric,vector) observation values of validation data. predScores (numeric,vector or matrix) prediction values from genomic selection models. evalMethod (character) alternative evaluation metrics, including \"pearson\", \"kendall\", \"spearman\", \"MSE\", \"R2\", \"RE\", \"Kappa\", \"AUC\", \"AUCpr\", \"accuracy\", \"F1\", \"meanNDCG\", \"NDCG\". Beta (numeric) the parameter of F-measure or F-score, when beta = 1, meaning F1, Default F1. BestIndividuals (character) the position of expected phenotype in whole phenotypic data set.\"top\",\"buttom\" or \"middle\",default \"top\". topAlpha (numeric, array) the proportion of considering excellent samples, default 1:90. globalAlpha (logical) if global metrics (pearson, kendall, spearman, MSE and R2) evaluate by threshold (topAlpha),default FALSE. probIndex (integer) indicate the column index which prediction result is probability. For example, classification model \"RFC\" locates the fifth column in prediction matrix and then probIndex = 5. Example data(\"cubic\") ########## prediction ############ C2Pres <- G2P(markers = Markers,data = pheData,trait = \"EW\", modelMethods = c(\"BayesA\", \"BRR\", \"RRBLUP\", \"SPLS\", \"SVC\", \"RFR\"),trainIdx = 1:200,predIdx = 201:400) ########## evaluation ############ evalres <- G2PEvaluation(realScores = C2Pres[,1], predScores = C2Pres[,2:7], evalMethod = c(\"pearson\", \"kendall\",\"spearman\",\"RE\",\"Kappa\", \"AUC\",\"AUCpr\",\"NDCG\",\"meanNDCG\", \"MSE\",\"R2\",\"F1\",\"accuracy\"),topAlpha = 1:90, probIndex = 5)","title":"Evaluation"},{"location":"Tutorial/#integration-of-prediction-results","text":"","title":"Integration of prediction results"},{"location":"Tutorial/#two-results-integration-and-user-defined-integration-more-than-two-models-results","text":"GSMerge Description The function provides a strategy to integrate the results of two or more methods. Usage GSMerge(predResMat, ratio, autoOptimize = F) Arguments predResMat (numeric, matrix) the prediction results of algorithms which you want to merge, the first column is the real value of trait. ratio (numeric,array) the weights of every algorithms. autoOptimize (logical) if true, two group results of methods from multiple-results will be selected and then get average (wight 1:1), default FALSE. Example data(\"cubic\") ## Genotype-to-phenotype ## G2Pres <- G2P(markers = Markers,data = pheData,trait = \"EW\", modelMethods = c(\"BayesA\", \"BRR\", \"RRBLUP\", \"SPLS\", \"RFR\"),trainIdx = 1:200,predIdx = 201:400) ## merge 2 model prediction results ## GSMergeRes <- GSMerge(predResMat = G2Pres[,c(\"realPhenScore\",\"RRBLUP\",\"SPLS\")], autoOptimize = F,ratio = c(3,7)) ## merge 2 model prediction results automatically ## GSMergeRes <- GSMerge(predResMat = G2Pres, autoOptimize = T) The function provides a strategy to integrate the results of multiple GS methods.","title":"Two results integration and user-defined integration (more than two models results)"},{"location":"Tutorial/#multiple-results-integration","text":"GSEnsemble Description Results integration of multiple GS methods Usage GSEnsemble(predMat, nrandom = 10, evalMethods, by = 0.1, evaluation = T, topAlpha = 15) Arguments predMat (numeric, matrix) the prediction results of algorithms which you want to merge, the first column is the real value of trait. nrandom (integer) the repeat number of stacking, default 10. evalMethods (character) ensemble base which evaluation methods. by (numeric,(0,1)) the radio window of ensemble, the smaller \"by\", the higher accuracy of ensemble. Default 0.1. evaluation (logical) if evaluate finalMat with evalMethods, default TRUE. topAlpha (numeric) the parameter of threshold evaluation methods, see also function evaluateGS. In this function, indicates the best ensemble base threshold when evalMethods is threshold methods. Example ## load example data ## data(\"cubic\") ## Genotype-to-phenotype ## G2Pres <- G2P(markers = Markers,data = pheData,trait = \"EW\", modelMethods = c(\"BayesA\", \"BRR\", \"RRBLUP\", \"SPLS\", \"RFR\"),trainIdx = 1:200,predIdx = 201:400) ## ensemble more than 2 prediction results of models automatically ## GSEnsembleRes <- GSEnsemble(predMat = G2Pres, nrandom = 10, evalMethods = \"pearson\", by = 0.1, evaluation = T) ## new prediction of genotype-to-phenotype ## G2PresNew <- G2P(markers = Markers,data = pheData,trait = \"EW\", modelMethods = c(\"BayesA\", \"BRR\", \"RRBLUP\", \"SPLS\", \"RFR\"),trainIdx = 1:200,predIdx = 401:600) ## apply GSEnsemble rotio to new prediction ## GSEnsembleModelRes <- GSMerge(predResMat = G2PresNew,ratio = GSEnsembleRes$BestWeight, autoOptimize = F)","title":"Multiple results integration"},{"location":"Tutorial/#refinement-design-of-training-dataset","text":"TSRefine Description Refining the training set for selective phenotyping to reduce cost. Usage TSRefine(markers,candidates,test = NULL,ntosel,method = \"PEVmean\", npop = 100, nelite =5 ,mutprob = .8,niterations = 500, cores = 1,lambda = NULL,sequent = FALSE,visulization = F) Arguments markers (numeric, matrix) row represents sample and column represents SNP (feature).Genotypes generally be coded as {0,1,2;0 represents AA(homozygote),2 represents BB(homozygote) and 1 represents AB(heterozygote); missing (NA) alleles are not allowed. candidates (charcter array) names of condidates population. test (character, array) names of testing or predicted set, defult NULL, if NULL, execute reference-free refinement, else execute reference-based refinement. ntosel (integer) number of samples to select in refinement. method (character) alternativeal algorithms for training set refinement or selection, including \"PEVmean\", \"CDmean\", \"sim\", or \"RD\". Default is \"PEVmean\". npop (integer) genetic algorithm parameter, number of solutions at each iteration. nelite (integer) genetic algorithm parameter, number of solutions selected as elite parents which will generate the next set of solutions. mutprob (numeric) genetic algorithm parameter, probability of mutation for each generated soluation. niterations (integer) genetic algorithm parameter, number of iterations. cores (integer) number of CPU cores to use. lambda (numeric) scalar shrinkage parameter (\u03bb>0). sequent (logical) phenotype selection parameter, if TRUE, perform sequential optimization, default FALSE. Example ## load example data ## data(\"cubic\") ## reference-free refinement ## G <- Markers[1:300,] TSR_SP <- TSRefine(markers = G, candidates = rownames(G), test = NULL, ntosel = 100,cores = 1,visulization = T) ## reference-based refinement (PEV-mean) ## TSR_PEVmean <- TSRefine(markers = G, method = \"PEVmean\", candidates = rownames(G)[1:200], test = rownames(Markers)[201:300], ntosel = 50,cores = 1,visulization = T)","title":"Refinement design of training dataset"},{"location":"about/","text":"About Release note, update log and others Version 1.0 (2023-04-08)","title":"About"},{"location":"about/#about","text":"Release note, update log and others","title":"About"},{"location":"about/#version-10-2023-04-08","text":"","title":"Version 1.0 (2023-04-08)"}]}