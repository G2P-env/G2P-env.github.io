{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"G2P G enotype to P henotype Overview of G2P G2P ( G enotype to P henotype) is an integrative environment in form of Singularity container, which not only contains a library of 16 state-of-the-art GS models and 13 evaluation metrics for model evaluation and selection but also provides several stand-alone software and easy-to-use functions for data preprocessing, population analysis, integration of prediction results from multiple models, and refinement of training datasets. G2P provides a comprehensive environment for genomic selection to facilitate the comparison and selection of appropriate model. G2P not only was developed and packaged in a Singularity container, allowing easy installation and upgrade, but also was accessible as an stand-alone R package. Installation of G2P container for installation and quick start of G2P. Input files and data preprocessing for functions of input files and data preprocessing. Genomic selection and model evaluation for functions of genotype-to-phenotype prediction. Integration of prediction results for functions of multiple models predciton results integration. Refinement design of training dataset for function of training dataset refinement and design. Interated GS models and evaluation metrics for integrated 16 GS models and 13 evaluation metics in G2P library. Github : G2P G2P container download link : G2P.sif R package download link : G2P_1.0.tar.gz QuickStart : G2P QuickStart Contact us : qchengray@gmail.com Note : cademic users can download directly, industrial users first contact us.","title":"Home"},{"location":"#g2p","text":"G enotype to P henotype Overview of G2P G2P ( G enotype to P henotype) is an integrative environment in form of Singularity container, which not only contains a library of 16 state-of-the-art GS models and 13 evaluation metrics for model evaluation and selection but also provides several stand-alone software and easy-to-use functions for data preprocessing, population analysis, integration of prediction results from multiple models, and refinement of training datasets. G2P provides a comprehensive environment for genomic selection to facilitate the comparison and selection of appropriate model. G2P not only was developed and packaged in a Singularity container, allowing easy installation and upgrade, but also was accessible as an stand-alone R package. Installation of G2P container for installation and quick start of G2P. Input files and data preprocessing for functions of input files and data preprocessing. Genomic selection and model evaluation for functions of genotype-to-phenotype prediction. Integration of prediction results for functions of multiple models predciton results integration. Refinement design of training dataset for function of training dataset refinement and design. Interated GS models and evaluation metrics for integrated 16 GS models and 13 evaluation metics in G2P library. Github : G2P G2P container download link : G2P.sif R package download link : G2P_1.0.tar.gz QuickStart : G2P QuickStart Contact us : qchengray@gmail.com Note : cademic users can download directly, industrial users first contact us.","title":"G2P"},{"location":"QuickStart/","text":"Quickstart Quickstart and examples of main functions This section mainly recommends the installation of G2P and briefly introduces some typical usage of G2P container and G2P package to help users get started quickly. Details and other functions of GOVS,please see Tutorial Installation Installation of G2P container 1. Installation of Singularity (Linux, assuming ubuntu) 1.1 Install system dependencies $ sudo apt-get update && sudo apt-get install -y \\ build-essential \\ libssl-dev \\ uuid-dev \\ libgpgme11-dev \\ squashfs-tools \\ libseccomp-dev \\ wget \\ pkg-config \\ git \\ cryptsetup 1.2 Installing GO $ export VERSION=1.16.4 OS=linux ARCH=amd64 && \\ # Replace the values as needed wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \\ # Downloads the required Go package sudo tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \\ # Extracts the archive rm go$VERSION.$OS-$ARCH.tar.gz # Deletes the ``tar`` file Note : you can vist Go Downloads page for suitable to the environment you are in 1.3 Installing Singularity You can download SingularityCE from one of the releases. To see a full list, visit the [GitHub release page](https://github.com/sylabs/singularity/releases). After deciding on a release to install, you can run the following commands to proceed with the installation (here we use version 3.8.1 as example). ```bash $ export VERSION=3.8.1 && # adjust this as necessary \\ wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-ce-${VERSION}.tar.gz && \\ tar -xzf singularity-ce-${VERSION}.tar.gz && \\ cd singularity-ce-${VERSION} 1.4 Compile singularity $ ./mconfig && \\ make -C builddir && \\ sudo make -C builddir install Note : If you get an error when compile, please try the following command or refer to Singularity websit for documents . ## Motify the file mlocal/frags/go_common_opts.mk in singularity path\uff0cfind the following line and change it GOPROXY := https://goproxy.cn,direct ## At the same time\uff0c motify the global proxy go env -w GOPROXY=https://goproxy.cn,direct 1.5 Installing Singularity for other operating system Singularity can be installed via Vagrant Boxes for Windows and Intel cores MacOS, the details please refer to Singularity installation guide . 2. Pulling G2P container singularity pull G2P.sif library://mym89757/repo/g2p:latest Installation of G2P R package Note : the functions, like GSFiltering , GSImputation , GSTransForm , GSRead shown in figure \"Overview of G2P\" a needs the opearation evironment and stand-alone software on the circle, namely\uff0c these function in G2P pcakage can't be performed normally unless the dependencis shown in figure \"Overview of G2P\" a (upper semicircle) have been correctly installed and configuration. G2P package can be installed for MacOS, Linux and windows and the functions shown in figure \"Overview of G2P\" b can run normally. 1. Github install ## install dependencies and GOVS install.packages(c(\"ggplot2\",\"brnn\",\"glmnet\",\"spls\",\"pls\",\"e1071\",\"BGLR\",\"rrBLUP\",\"randomForest\",\"hglm\",\"hglm.data\",\"parallel\",\"pROC\",\"PRROC\",\"STPGA\",\"reshape\",\"reshape2\",\"grid\",\"pbapply\",\"pheatmap\")) require(\"devtools\") install_github(\"G2P-env/G2P\") 2.Download .tar.gz package and install ## install dependencies and GOVS with bult-in vignette install.packages(c(\"ggplot2\",\"brnn\",\"glmnet\",\"spls\",\"pls\",\"e1071\",\"BGLR\",\"rrBLUP\",\"randomForest\",\"hglm\",\"hglm.data\",\"parallel\",\"pROC\",\"PRROC\",\"STPGA\",\"reshape\",\"reshape2\",\"grid\",\"pbapply\",\"pheatmap\")) install.packages(\"DownloadPath/GOVS_1.0.tar.gz\") Usage of G2P container 1. Using G2P for interactive window $singularity exec G2P.sif R G2P Container run R Then R can be used as usual. ## library G2P package library(G2P) ## load example data ## data(cubic) ## perform genotype to phenotype prediction with all integrated methods ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400) 2. Using G2P to run Rscrit data(cubic) ## perform genotype to phenotype prediction ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\",\"RRBLUP\", \"SPLS\"),trainIdx = 1:200,predIdx = 201:400) write.table(G2Pres,file = \"predRes.txt\",quote = F,col.names = T) Saving above scripts or your own scripts to an R scripts file *.r (e.g. predGS_test.r), Then use G2P container to run it. $singularity exec G2P.sif Rscript predGS_test.r G2P Container run R 3 Using G2P Container run stand-alone software Plink $singularity exec G2P.sif plink G2P Container run Plink Gemma $singularity exec G2P.sif gemma G2P Container run Gemma GCTA $singularity exec G2P.sif GCTA G2P Container run GCTA TASSEL $singularity exec G2P.sif Tassel G2P Container run TASSEL VCFtools $singularity exec G2P.sif vcftools G2P Container run VCFtools Usage of G2P pacakge","title":"QuickStart"},{"location":"QuickStart/#quickstart","text":"Quickstart and examples of main functions This section mainly recommends the installation of G2P and briefly introduces some typical usage of G2P container and G2P package to help users get started quickly. Details and other functions of GOVS,please see Tutorial","title":"Quickstart"},{"location":"QuickStart/#installation","text":"","title":"Installation"},{"location":"QuickStart/#installation-of-g2p-container","text":"","title":"Installation of G2P container"},{"location":"QuickStart/#1-installation-of-singularity-linux-assuming-ubuntu","text":"1.1 Install system dependencies $ sudo apt-get update && sudo apt-get install -y \\ build-essential \\ libssl-dev \\ uuid-dev \\ libgpgme11-dev \\ squashfs-tools \\ libseccomp-dev \\ wget \\ pkg-config \\ git \\ cryptsetup 1.2 Installing GO $ export VERSION=1.16.4 OS=linux ARCH=amd64 && \\ # Replace the values as needed wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \\ # Downloads the required Go package sudo tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \\ # Extracts the archive rm go$VERSION.$OS-$ARCH.tar.gz # Deletes the ``tar`` file Note : you can vist Go Downloads page for suitable to the environment you are in 1.3 Installing Singularity You can download SingularityCE from one of the releases. To see a full list, visit the [GitHub release page](https://github.com/sylabs/singularity/releases). After deciding on a release to install, you can run the following commands to proceed with the installation (here we use version 3.8.1 as example). ```bash $ export VERSION=3.8.1 && # adjust this as necessary \\ wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-ce-${VERSION}.tar.gz && \\ tar -xzf singularity-ce-${VERSION}.tar.gz && \\ cd singularity-ce-${VERSION} 1.4 Compile singularity $ ./mconfig && \\ make -C builddir && \\ sudo make -C builddir install Note : If you get an error when compile, please try the following command or refer to Singularity websit for documents . ## Motify the file mlocal/frags/go_common_opts.mk in singularity path\uff0cfind the following line and change it GOPROXY := https://goproxy.cn,direct ## At the same time\uff0c motify the global proxy go env -w GOPROXY=https://goproxy.cn,direct 1.5 Installing Singularity for other operating system Singularity can be installed via Vagrant Boxes for Windows and Intel cores MacOS, the details please refer to Singularity installation guide .","title":"1. Installation of Singularity (Linux, assuming ubuntu) "},{"location":"QuickStart/#2-pulling-g2p-container","text":"singularity pull G2P.sif library://mym89757/repo/g2p:latest","title":"2. Pulling G2P container"},{"location":"QuickStart/#installation-of-g2p-r-package","text":"Note : the functions, like GSFiltering , GSImputation , GSTransForm , GSRead shown in figure \"Overview of G2P\" a needs the opearation evironment and stand-alone software on the circle, namely\uff0c these function in G2P pcakage can't be performed normally unless the dependencis shown in figure \"Overview of G2P\" a (upper semicircle) have been correctly installed and configuration. G2P package can be installed for MacOS, Linux and windows and the functions shown in figure \"Overview of G2P\" b can run normally. 1. Github install ## install dependencies and GOVS install.packages(c(\"ggplot2\",\"brnn\",\"glmnet\",\"spls\",\"pls\",\"e1071\",\"BGLR\",\"rrBLUP\",\"randomForest\",\"hglm\",\"hglm.data\",\"parallel\",\"pROC\",\"PRROC\",\"STPGA\",\"reshape\",\"reshape2\",\"grid\",\"pbapply\",\"pheatmap\")) require(\"devtools\") install_github(\"G2P-env/G2P\") 2.Download .tar.gz package and install ## install dependencies and GOVS with bult-in vignette install.packages(c(\"ggplot2\",\"brnn\",\"glmnet\",\"spls\",\"pls\",\"e1071\",\"BGLR\",\"rrBLUP\",\"randomForest\",\"hglm\",\"hglm.data\",\"parallel\",\"pROC\",\"PRROC\",\"STPGA\",\"reshape\",\"reshape2\",\"grid\",\"pbapply\",\"pheatmap\")) install.packages(\"DownloadPath/GOVS_1.0.tar.gz\")","title":"Installation of G2P R package"},{"location":"QuickStart/#usage-of-g2p-container","text":"","title":"Usage of G2P container"},{"location":"QuickStart/#1-using-g2p-for-interactive-window","text":"$singularity exec G2P.sif R G2P Container run R Then R can be used as usual. ## library G2P package library(G2P) ## load example data ## data(cubic) ## perform genotype to phenotype prediction with all integrated methods ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\", \"BayesB\", \"BayesC\", \"BL\", \"BRR\", \"RKHS\", \"RRBLUP\",\"LASSO\", \"SPLS\", \"SVC\", \"SVR\", \"RFR\", \"RFC\", \"RR\", \"RKHS\", \"BRNN\"),trainIdx = 1:200,predIdx = 201:400)","title":"1. Using G2P for interactive window"},{"location":"QuickStart/#2-using-g2p-to-run-rscrit","text":"data(cubic) ## perform genotype to phenotype prediction ## C2Pres <- G2P(markers = Markers,data = pheData,trait = \"DTT\", modelMethods = c(\"BayesA\",\"RRBLUP\", \"SPLS\"),trainIdx = 1:200,predIdx = 201:400) write.table(G2Pres,file = \"predRes.txt\",quote = F,col.names = T) Saving above scripts or your own scripts to an R scripts file *.r (e.g. predGS_test.r), Then use G2P container to run it. $singularity exec G2P.sif Rscript predGS_test.r G2P Container run R","title":"2. Using G2P to run Rscrit"},{"location":"QuickStart/#3-using-g2p-container-run-stand-alone-software","text":"Plink $singularity exec G2P.sif plink G2P Container run Plink Gemma $singularity exec G2P.sif gemma G2P Container run Gemma GCTA $singularity exec G2P.sif GCTA G2P Container run GCTA TASSEL $singularity exec G2P.sif Tassel G2P Container run TASSEL VCFtools $singularity exec G2P.sif vcftools G2P Container run VCFtools","title":"3 Using G2P Container run stand-alone software"},{"location":"QuickStart/#usage-of-g2p-pacakge","text":"","title":"Usage of G2P pacakge"},{"location":"Tutorial/","text":"Tutorial Function introduction and parameter information In this section, the functions in GOVS and thier parameters will be introducted in details. GOVS GOVS Description One-stop function for a complete progress of genome optimization Usage GOVS(hmp,ID = NULL,pheno,trait,bins,binsInfo,output,module = \"DES\",designInfo = NULL) Arguments hmp The genetic data in hapmap format. ID A character array regarding sample IDs for hmp , if NULL, the hmp data must involve header. pheno Phenotypic data frame, the first column describes sample IDs. trait The names of interest trait (The trait must be included in Pheno data frame). bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. binsInfo Data frame, including bins index, start, end, length of bins locus. output The prefix of output files. module Character represents the module combination for analysis, default \"DES\", \"D\" for genome optimization module, \"E\" for extraction & assembly module. \"S\" for statistic module. \"D\",\"E\",\"S\",\"DE\",\"DES\" and \"ES\" are alternative for different module combinations. Note that different combination need different essential inputs, details see genomeOptimization extractGenome statDesign . designInfo Data frame, the results of genome optimization module, it's necessary for \"ES\" and \"S\" module. Genome optimization module genomeOptimization Description Virtual genome optimization based IBD(bins) data Usage genomeOptimization(pheno, bins, trait, output) Arguments Pheno Phenotypic data frame, the first column describes sample names. bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. trait The names of interest trait (The trait must be included in Pheno data frame). output The prefix of output files regarding the scheme of virtual genome. Extraction and assembly module extractGenome Description Extracting genome fragment from candidates based the results of genome optimization and then assembling all fragments so that produce optimized genome(virtual genome). Usage extractGenome(hmp,binInfo,ID = NULL,designInfo,output,write = F,bins,extractContent =\"Genotype\") Arguments hmp The genetic data in hapmap format. binInfo Data frame, including bins index, start, end, length of bins locus. ID A character array regarding sample IDs for hmp , if NULL, the hmp data must involve header. designInfo Outputs of [ genomeOptimization ]{#genome-optimization-module}, a matrix consists of sample IDs regarding the fragment source among condidates at each bin locus. write Boolean, if write the assembled genome to file, default FALSE. bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. extractContent Character, the content of virtual genome, \"Bin\" for bin source well \"Genotype\" for genetic data, default \"Genotype\". Statistic module statDesign Description Statistic summary for analysis of the contribution of all candidates to optimal genome. The results directly guide the lines selection and population improvement route. Usage statDesign(designInfo,binInfo,pheno,trait,output) Arguments designInfo Outputs of genomeOptimization , a matrix consists of sample IDs regarding the fragment source among condidates at each bin locus. binInfo Data frame, including bins index, start, end, length of bins locus. pheno Phenotypic data frame, the first column describes sample names. trait The names of interest trait (The trait must be included in Pheno data frame). output The prefix of output files regarding the summary and statistic infomation via the process of genome optimization. Genome selection prediciton module rrBLUP model SNPrrBLUP Description Genotpye-to-phenotype prediciton via ridge regression best linear unbiased prediction (rrBLUP) model. The inputs is genotypes. Usage SNPrrBLUP(x,y,fix = NULL,idx1,idx2) Arguments x Genotypic matrix in numberic format (See transHapmap2numeric ), row represents sample well column represents feature (SNP). y An numeric array of phenotype. fix A matrix containing other variables as fixed effects in mixed model. idx1 An array of index for training set idx2 An array of index for testing (predicted) set GBLUP model GBLUP Description Genotpye-to-phenotype prediciton via genomic best linear unbiased prediction (GBLUP) model. The inputs is genotypes. Usage GBLUP(amat,y,idx1,idx2,fix = NULL) Arguments amat Additive relationship matrix, which compute from genetic matrix. y An numeric array of phenotype. fix A matrix containing other variables as fixed effects in mixed model. idx1 An array of index for training set idx2 An array of index for testing (predicted) set Bins map construction and visualization Construct IBD map IBDConstruct Description A IBD map was constructed of contributions from the parents onto the progeny lines using a hidden Markov model (HMM). Usage IBDConstruct(snpParents,snpProgeny,markerInfo,q,rou,G,threshold = NULL,omit = T) Arguments snpParents A matrix for the parents' genotype, lines in column and marker in row. snpProgeny An array for the progeny' genotype, marker number must equal to snpParents. markerInfo A matrix or dataframe with four cols(marker ID, allele, chromsome and physical position) regarding genotypic information. q The quality of sequencing, range 0 to 1 to define the quality of marker. rou Correlations between any pairs of flanking markers, that estimated with the offspring-LD level after corrected by parent-LD level, it can be obtained by genetic location. G Generations that the offsprings decented from the parents. threshold The threshold of posterior. omit Whether to omit untraceable segments, default True. Bins map construction and visualization Visualization of IBD map results binsPlot Description Visualization of IBD map results. Usage binsPlot(IBDRes,color,parentInfo,parentNum) Arguments IBDRes The results of IBDConstruct, see IBDConstruct . color A named vector for defining color of parents. parentInfo A named vector for defining label of parents. parentNum The number of parents. Visualization of bins data mosaicPlot Description Visualization of overall bins data Usage mosaicPlot(bins,binsInfo,chr,resolution = 500,list,parentNum = 24,color,clust = T,methods = \"ward.D2\",dist_method = \"euclidean\") Arguments bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. binsInfo Data frame, including bins index, start, end, length of bins locus. chr Which chromesome will be used to plot mosaic. resolution To set the resolution of mosaic plot, default 500. list The names of lines to visualize mosaic plot. parentNum The number of parent, if color not defined, this parameter is used to auto generate color palette. color A array to define color palette. clust Boolean values determining if lines should be hclust object. methods Clustering method used. dist_method The distance measure to be used for clustering. Orther useful functions Transform character to number transHapmap2numeric Description This function help users to transform genetic matrix from character format to numeric format. AA-0, Aa-1, aa-2, A is major allele and a is minor allele. Usage transHapmap2numeric(G) Arguments G Genetic matrix of character, row represents sample and column represents SNP. Computation of GCA gcaCompute Description Calculate parental general combining ability (GCA) based F1 phenotypic values. Usage gcaCompute(phe_df,which,trait) Arguments phe_df Phenotypic data frame, row represents F1 combination and includes the paternal information in columns. which The column index of male or female to compute parternal or maternal GCA. trait A character string to define which trait GCA will be computed, this function support two or more phenotypic GCA be computed at the same time. Computation of SCA scaCompute Description Calculate hybrid special combining ability (SCA) based F1 phenotypic values. Usage scaCompute(phe_df,which_male,which_female,trait,seqname) Arguments phe_df Phenotypic data frame, row represents F1 combination and includes the paternal information in columns. which_male The column index of paternal IDs. which_female The column index of maternal IDs. trait A character string to define which trait GCA will be computed, this function support two or more phenotypic GCA be computed at the same time. seqname A character array regarding hybrid IDs Distribution correction reviseFunc Description Scale two sets of data to a uniform distribution. Usage reviseFunc(ori,aim,cut = 10,sample_names) Arguments ori A numeric array, as reference for correction. aim A numeric array, which is the object to implement correction. cut Number of intervals to cut, default 10. sample_names A character array consits of aim 's name.","title":"Tutorial"},{"location":"Tutorial/#tutorial","text":"Function introduction and parameter information In this section, the functions in GOVS and thier parameters will be introducted in details.","title":"Tutorial"},{"location":"Tutorial/#govs","text":"GOVS Description One-stop function for a complete progress of genome optimization Usage GOVS(hmp,ID = NULL,pheno,trait,bins,binsInfo,output,module = \"DES\",designInfo = NULL) Arguments hmp The genetic data in hapmap format. ID A character array regarding sample IDs for hmp , if NULL, the hmp data must involve header. pheno Phenotypic data frame, the first column describes sample IDs. trait The names of interest trait (The trait must be included in Pheno data frame). bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. binsInfo Data frame, including bins index, start, end, length of bins locus. output The prefix of output files. module Character represents the module combination for analysis, default \"DES\", \"D\" for genome optimization module, \"E\" for extraction & assembly module. \"S\" for statistic module. \"D\",\"E\",\"S\",\"DE\",\"DES\" and \"ES\" are alternative for different module combinations. Note that different combination need different essential inputs, details see genomeOptimization extractGenome statDesign . designInfo Data frame, the results of genome optimization module, it's necessary for \"ES\" and \"S\" module.","title":"GOVS"},{"location":"Tutorial/#genome-optimization-module","text":"genomeOptimization Description Virtual genome optimization based IBD(bins) data Usage genomeOptimization(pheno, bins, trait, output) Arguments Pheno Phenotypic data frame, the first column describes sample names. bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. trait The names of interest trait (The trait must be included in Pheno data frame). output The prefix of output files regarding the scheme of virtual genome.","title":"Genome optimization module"},{"location":"Tutorial/#extraction-and-assembly-module","text":"extractGenome Description Extracting genome fragment from candidates based the results of genome optimization and then assembling all fragments so that produce optimized genome(virtual genome). Usage extractGenome(hmp,binInfo,ID = NULL,designInfo,output,write = F,bins,extractContent =\"Genotype\") Arguments hmp The genetic data in hapmap format. binInfo Data frame, including bins index, start, end, length of bins locus. ID A character array regarding sample IDs for hmp , if NULL, the hmp data must involve header. designInfo Outputs of [ genomeOptimization ]{#genome-optimization-module}, a matrix consists of sample IDs regarding the fragment source among condidates at each bin locus. write Boolean, if write the assembled genome to file, default FALSE. bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. extractContent Character, the content of virtual genome, \"Bin\" for bin source well \"Genotype\" for genetic data, default \"Genotype\".","title":"Extraction and assembly module"},{"location":"Tutorial/#statistic-module","text":"statDesign Description Statistic summary for analysis of the contribution of all candidates to optimal genome. The results directly guide the lines selection and population improvement route. Usage statDesign(designInfo,binInfo,pheno,trait,output) Arguments designInfo Outputs of genomeOptimization , a matrix consists of sample IDs regarding the fragment source among condidates at each bin locus. binInfo Data frame, including bins index, start, end, length of bins locus. pheno Phenotypic data frame, the first column describes sample names. trait The names of interest trait (The trait must be included in Pheno data frame). output The prefix of output files regarding the summary and statistic infomation via the process of genome optimization.","title":"Statistic module"},{"location":"Tutorial/#genome-selection-prediciton-module","text":"","title":"Genome selection prediciton module"},{"location":"Tutorial/#rrblup-model","text":"SNPrrBLUP Description Genotpye-to-phenotype prediciton via ridge regression best linear unbiased prediction (rrBLUP) model. The inputs is genotypes. Usage SNPrrBLUP(x,y,fix = NULL,idx1,idx2) Arguments x Genotypic matrix in numberic format (See transHapmap2numeric ), row represents sample well column represents feature (SNP). y An numeric array of phenotype. fix A matrix containing other variables as fixed effects in mixed model. idx1 An array of index for training set idx2 An array of index for testing (predicted) set","title":"rrBLUP model"},{"location":"Tutorial/#gblup-model","text":"GBLUP Description Genotpye-to-phenotype prediciton via genomic best linear unbiased prediction (GBLUP) model. The inputs is genotypes. Usage GBLUP(amat,y,idx1,idx2,fix = NULL) Arguments amat Additive relationship matrix, which compute from genetic matrix. y An numeric array of phenotype. fix A matrix containing other variables as fixed effects in mixed model. idx1 An array of index for training set idx2 An array of index for testing (predicted) set","title":"GBLUP model"},{"location":"Tutorial/#bins-map-construction-and-visualization","text":"","title":"Bins map construction and visualization"},{"location":"Tutorial/#construct-ibd-map","text":"IBDConstruct Description A IBD map was constructed of contributions from the parents onto the progeny lines using a hidden Markov model (HMM). Usage IBDConstruct(snpParents,snpProgeny,markerInfo,q,rou,G,threshold = NULL,omit = T) Arguments snpParents A matrix for the parents' genotype, lines in column and marker in row. snpProgeny An array for the progeny' genotype, marker number must equal to snpParents. markerInfo A matrix or dataframe with four cols(marker ID, allele, chromsome and physical position) regarding genotypic information. q The quality of sequencing, range 0 to 1 to define the quality of marker. rou Correlations between any pairs of flanking markers, that estimated with the offspring-LD level after corrected by parent-LD level, it can be obtained by genetic location. G Generations that the offsprings decented from the parents. threshold The threshold of posterior. omit Whether to omit untraceable segments, default True.","title":"Construct IBD map"},{"location":"Tutorial/#bins-map-construction-and-visualization_1","text":"","title":"Bins map construction and visualization"},{"location":"Tutorial/#visualization-of-ibd-map-results","text":"binsPlot Description Visualization of IBD map results. Usage binsPlot(IBDRes,color,parentInfo,parentNum) Arguments IBDRes The results of IBDConstruct, see IBDConstruct . color A named vector for defining color of parents. parentInfo A named vector for defining label of parents. parentNum The number of parents.","title":"Visualization of IBD map results"},{"location":"Tutorial/#visualization-of-bins-data","text":"mosaicPlot Description Visualization of overall bins data Usage mosaicPlot(bins,binsInfo,chr,resolution = 500,list,parentNum = 24,color,clust = T,methods = \"ward.D2\",dist_method = \"euclidean\") Arguments bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. binsInfo Data frame, including bins index, start, end, length of bins locus. chr Which chromesome will be used to plot mosaic. resolution To set the resolution of mosaic plot, default 500. list The names of lines to visualize mosaic plot. parentNum The number of parent, if color not defined, this parameter is used to auto generate color palette. color A array to define color palette. clust Boolean values determining if lines should be hclust object. methods Clustering method used. dist_method The distance measure to be used for clustering.","title":"Visualization of bins data"},{"location":"Tutorial/#orther-useful-functions","text":"","title":"Orther useful functions"},{"location":"Tutorial/#transform-character-to-number","text":"transHapmap2numeric Description This function help users to transform genetic matrix from character format to numeric format. AA-0, Aa-1, aa-2, A is major allele and a is minor allele. Usage transHapmap2numeric(G) Arguments G Genetic matrix of character, row represents sample and column represents SNP.","title":"Transform character to number"},{"location":"Tutorial/#computation-of-gca","text":"gcaCompute Description Calculate parental general combining ability (GCA) based F1 phenotypic values. Usage gcaCompute(phe_df,which,trait) Arguments phe_df Phenotypic data frame, row represents F1 combination and includes the paternal information in columns. which The column index of male or female to compute parternal or maternal GCA. trait A character string to define which trait GCA will be computed, this function support two or more phenotypic GCA be computed at the same time.","title":"Computation of GCA"},{"location":"Tutorial/#computation-of-sca","text":"scaCompute Description Calculate hybrid special combining ability (SCA) based F1 phenotypic values. Usage scaCompute(phe_df,which_male,which_female,trait,seqname) Arguments phe_df Phenotypic data frame, row represents F1 combination and includes the paternal information in columns. which_male The column index of paternal IDs. which_female The column index of maternal IDs. trait A character string to define which trait GCA will be computed, this function support two or more phenotypic GCA be computed at the same time. seqname A character array regarding hybrid IDs","title":"Computation of SCA"},{"location":"Tutorial/#distribution-correction","text":"reviseFunc Description Scale two sets of data to a uniform distribution. Usage reviseFunc(ori,aim,cut = 10,sample_names) Arguments ori A numeric array, as reference for correction. aim A numeric array, which is the object to implement correction. cut Number of intervals to cut, default 10. sample_names A character array consits of aim 's name.","title":"Distribution correction"},{"location":"about/","text":"About Release note, update log and others Version 1.0 (2022-11-08)","title":"About"},{"location":"about/#about","text":"Release note, update log and others","title":"About"},{"location":"about/#version-10-2022-11-08","text":"","title":"Version 1.0 (2022-11-08)"},{"location":"details/","text":"References Akdemir, D. (2017). STPGA: Selection of training populations with a genetic algorithm. bioRxiv:111989. Bernardo, R. (2002). Breeding for quantitative traits in plants: Stemma Press Woodbury. Blondel, M., Onogi, A., Iwata, H., and Ueda, N. (2015). A ranking approach to genomic selection. PLoS One 10:e0128570. Breiman, L. (2001). Random forests. Machine learning 45:5-32. Bruck, H., McNeill, S., Sutton, M.A., and Peters, W.H. (1989). Digital image correlation using Newton-Raphson method of partial differential correction. Experimental mechanics 29:261-267. Chun, H., and Kele\u015f, S. (2010). Sparse partial least squares regression for simultaneous dimension reduction and variable selection. Journal of the Royal Statistical Society: Series B (Statistical Methodology) 72:3-25. Cortes, C., and Vapnik, V. (1995). Support-vector networks. Machine Learning 20:273-297. Covarrubias-Pazaran, G. (2016). Genome-Assisted Prediction of Quantitative Traits Using the R Package sommer. PloS one 11:e0156744. Desta, Z.A., and Ortiz, R. (2014). Genomic selection: genome-wide prediction in plant improvement. Trends in plant science 19:592-601. Gilmour, A.R., Thompson, R., and Cullis, B.R. (1995). Average information REML: an efficient algorithm for variance parameter estimation in linear mixed models. Biometrics:1440-1450. Habier, D., Fernando, R.L., Kizilkaya, K., and Garrick, D.J. (2011). Extension of the Bayesian alphabet for genomic selection. BMC bioinformatics 12:186. Hayes, B., and Goddard, M. (2001). Prediction of total genetic value using genome-wide dense marker maps. Genetics 157:1819-1829. Hoerl, A.E., and Kennard, R.W. (1970). Ridge regression: Biased estimation for nonorthogonal problems. Technometrics 12:55-67. Jin, C., Lan, H., Attie, A.D., Churchill, G.A., Bulutuglo, D., and Yandell, B.S. (2004). Selective phenotyping for increased efficiency in genetic mapping studies. Genetics 168:2285-2293. Kang, H.M., Zaitlen, N.A., Wade, C.M., Kirby, A., Heckerman, D., Daly, M.J., and Eskin, E. (2008). Efficient control of population structure in model organism association mapping. Genetics 178:1709-1723. Ogutu, J.O., Schulz-Streeck, T., and Piepho, H.-P. (2012). Genomic selection using regularized linear regression models: ridge regression, lasso, elastic net and their extensions. In: BMC proceedings: BioMed Central. S10. Ornella, L., P\u00e9rez, P., Tapia, E., Gonz\u00e1lez-Camacho, J., Burgue\u00f1o, J., Zhang, X., Singh, S., Vicente, F., Bonnett, D., and Dreisigacker, S. (2014). Genomic-enabled prediction with classification algorithms. Heredity 112:616-626. P\u00e9rez-Rodr\u00edguez, P., Gianola, D., Weigel, K., Rosa, G., and Crossa, J. (2013). Technical Note: An R package for fitting Bayesian regularized neural networks with applications in animal breeding. Journal of animal science 91:3522-3531. Piepho, H.-P. (2009). Ridge regression and extensions for genomewide selection in maize. Crop Science 49:1165-1176. Shen, X., Alam, M., Fikse, F., and R\u00f6nneg\u00e5rd, L. (2013). A novel generalized ridge regression method for quantitative genetics. Genetics 193:1255-1268. \u00dcst\u00fcnkar, G., \u00d6z\u00f6\u011f\u00fcr-Aky\u00fcz, S., Weber, G.-W., and Son, Y.A. (2011). Analysis of SNP-complex disease association by a novel feature selection method. In: Operations Research Proceedings 2010: Springer. 21-26. Xu, H. (2003). Minimum moment aberration for nonregular designs and supersaturated designs. Statistica Sinica:691-708.","title":"Details"},{"location":"details/#references","text":"Akdemir, D. (2017). STPGA: Selection of training populations with a genetic algorithm. bioRxiv:111989. Bernardo, R. (2002). Breeding for quantitative traits in plants: Stemma Press Woodbury. Blondel, M., Onogi, A., Iwata, H., and Ueda, N. (2015). A ranking approach to genomic selection. PLoS One 10:e0128570. Breiman, L. (2001). Random forests. Machine learning 45:5-32. Bruck, H., McNeill, S., Sutton, M.A., and Peters, W.H. (1989). Digital image correlation using Newton-Raphson method of partial differential correction. Experimental mechanics 29:261-267. Chun, H., and Kele\u015f, S. (2010). Sparse partial least squares regression for simultaneous dimension reduction and variable selection. Journal of the Royal Statistical Society: Series B (Statistical Methodology) 72:3-25. Cortes, C., and Vapnik, V. (1995). Support-vector networks. Machine Learning 20:273-297. Covarrubias-Pazaran, G. (2016). Genome-Assisted Prediction of Quantitative Traits Using the R Package sommer. PloS one 11:e0156744. Desta, Z.A., and Ortiz, R. (2014). Genomic selection: genome-wide prediction in plant improvement. Trends in plant science 19:592-601. Gilmour, A.R., Thompson, R., and Cullis, B.R. (1995). Average information REML: an efficient algorithm for variance parameter estimation in linear mixed models. Biometrics:1440-1450. Habier, D., Fernando, R.L., Kizilkaya, K., and Garrick, D.J. (2011). Extension of the Bayesian alphabet for genomic selection. BMC bioinformatics 12:186. Hayes, B., and Goddard, M. (2001). Prediction of total genetic value using genome-wide dense marker maps. Genetics 157:1819-1829. Hoerl, A.E., and Kennard, R.W. (1970). Ridge regression: Biased estimation for nonorthogonal problems. Technometrics 12:55-67. Jin, C., Lan, H., Attie, A.D., Churchill, G.A., Bulutuglo, D., and Yandell, B.S. (2004). Selective phenotyping for increased efficiency in genetic mapping studies. Genetics 168:2285-2293. Kang, H.M., Zaitlen, N.A., Wade, C.M., Kirby, A., Heckerman, D., Daly, M.J., and Eskin, E. (2008). Efficient control of population structure in model organism association mapping. Genetics 178:1709-1723. Ogutu, J.O., Schulz-Streeck, T., and Piepho, H.-P. (2012). Genomic selection using regularized linear regression models: ridge regression, lasso, elastic net and their extensions. In: BMC proceedings: BioMed Central. S10. Ornella, L., P\u00e9rez, P., Tapia, E., Gonz\u00e1lez-Camacho, J., Burgue\u00f1o, J., Zhang, X., Singh, S., Vicente, F., Bonnett, D., and Dreisigacker, S. (2014). Genomic-enabled prediction with classification algorithms. Heredity 112:616-626. P\u00e9rez-Rodr\u00edguez, P., Gianola, D., Weigel, K., Rosa, G., and Crossa, J. (2013). Technical Note: An R package for fitting Bayesian regularized neural networks with applications in animal breeding. Journal of animal science 91:3522-3531. Piepho, H.-P. (2009). Ridge regression and extensions for genomewide selection in maize. Crop Science 49:1165-1176. Shen, X., Alam, M., Fikse, F., and R\u00f6nneg\u00e5rd, L. (2013). A novel generalized ridge regression method for quantitative genetics. Genetics 193:1255-1268. \u00dcst\u00fcnkar, G., \u00d6z\u00f6\u011f\u00fcr-Aky\u00fcz, S., Weber, G.-W., and Son, Y.A. (2011). Analysis of SNP-complex disease association by a novel feature selection method. In: Operations Research Proceedings 2010: Springer. 21-26. Xu, H. (2003). Minimum moment aberration for nonregular designs and supersaturated designs. Statistica Sinica:691-708.","title":"References"}]}